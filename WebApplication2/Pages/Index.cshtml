@page
@model WebApplication2.Pages.IndexModel
@{
    ViewData["Title"] = "Index";
}
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />
    <title>ChatApp</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #f8f9fa;
        }

        .top-row {
            background-color: #343a40;
            color: white;
            padding: 10px 20px;
        }

        .main-container {
            height: calc(100vh - 50px);
            display: flex;
        }

        .sidebar {
            width: 150px;
            background-color: #ffffff;
            padding: 20px;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            overflow-y: auto;
            border-right: 1px solid #dee2e6;
        }

            .sidebar h2 {
                font-size: 1.2rem;
                margin-bottom: 20px;
                color: #333;
                border-bottom: 1px solid #ccc;
                padding-bottom: 10px;
            }

            .sidebar a {
                padding: 10px 15px;
                text-decoration: none;
                display: block;
                color: #333;
                border-radius: 5px;
                margin-bottom: 5px;
                transition: background-color 0.2s;
            }
            .sidebar a.chat-link{
                display: block;
                padding: 10px;
                color: black;
                text-decoration: none;
                transition: background-color 0.2s ease;
            }
            .sidebar a.chat-link:hover{
                background-color:#87cefa;
            }
                .sidebar a:hover {
                    background-color: #e9ecef;
                }

        .content {
            flex-grow: 1;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            padding: 20px;
            background-color: #f1f3f5; 
        }
        .chat-messages{
            display: flex;
            flex-grow: 1;
            overflow-y:auto;
            padding-right: 10px;
            margin-bottom: 10px;
            height: 500px;
        }
        .chat-input{
            border-top: 1px solid #ccc;
        }

        .message {
            padding: 10px;
            margin: 5px;
            border-radius: 10px;
            max-width: 60%;
            word-wrap: break-word;
            display: block;
        }

        .message-left {
            background-color: #f1f0f0;
            text-align: left;
            margin-right: auto;
        }

        .message-right {
            background-color: #cce5ff;
            text-align: right;
            margin-left: auto;
        }

        .message-time {
            font-size: 0.75rem;
            color: gray;
            margin-top: 5px;
        }
    </style>
</head>
<body>

    <div class="d-flex main-container">
        <div class="sidebar">
            <h2>Your Chats</h2>
            @foreach (var user in Model.Users)
            {
                <a href="#" class="chat-link" data-username="@user.Username">@user.Username</a>             
            }
        </div>
            
        <div class="content">
            @if (User.Identity.IsAuthenticated)
            {
                <div class="chat-messages mb-3 d-flex flex-column" style="height: 500px;">
                    <div class="sending-to-bar p-1 align-items-center" style="flex: 0 0 auto; background-color: white; border-bottom: 1px solid #ccc;">
                        <div class="row">
                            <div class="col-auto">
                                <strong>Sending to:</strong>
                            </div>
                            <div class="col-auto">
                                <span id="selectedReceiverDisplay">None</span>
                            </div>
                        </div>
                    </div>

                    <div class="messages-list-container flex-grow-1 overflow-auto" style="padding-right: 10px;">
                        <ul id="messagesList" class="list-unstyled m-0" style="height: 100%;">
                        @foreach(var msg in Model.ChatHistory)
                        {
                            var isMe = msg.SenderUsername == User.Identity.Name;
                            <li class="message @(isMe ? "message-right" : "message-left")">
                                <div>From @msg.SenderUsername to @msg.ReceiverUsername:</div>
                                <div>@Html.Raw(msg.Content)</div>
                                <div class="message-time">@msg.SentAt.ToString("HH:mm")</div>
                            </li>
                        }
                        </ul>
                    </div>
                </div>

                <div class="chat-input bg-white p-3 rounded shadow-sm">
                <div class="row p-1">
                    <div class="col-5"><input type="hidden" id="currentUsername" value="@User.Identity.Name"/></div>
                </div>               
                <div class="row p-1 d-none">
                    <div class="col-1">To:</div>
                    <div class="col-5">
                        <select class="form-select" id="receiverInput">
                            <option value="">Select user</option>
                            @foreach (var user in Model.Users)
                            {
                                <option value="@user.Username">@user.Username</option>
                            }
                        </select>
                    </div>
                </div>
                    <div class="d-flex justify-content-center mt-3">
                        <div class="chat-input bg-white p-3 rounded shadow-sm" style="width: 100%; max-width: 800px;">
                            <div style="display: flex; align-items: center; gap: 10px; flex-wrap: nowrap;">

                                <textarea id="messageInput" rows="2" placeholder="Type your message..." class="form-control" style="flex: 1; resize: none;"></textarea>

                                <div style="display: flex; flex-direction: column; align-items: flex-start; max-width: 150px;">
                                    <input type="file" id="fileInput" accept="file/*" class="form-control form-control-sm" />
                                </div>

                                <input type="button" id="sendButton" value="Send Message" class="btn btn-primary" disabled style="height: 38px;" />
                            </div>
                        </div>
                    </div>

                </div>
            }
            else
            {
                <h1>Welcome to ChatApp</h1>
                <p>Please <a href="/Login">log in</a> or <a href="/Register">register</a> to start chatting.</p>
            }
        </div>

        <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
        <script src="~/js/chat.js"></script>


        <script>
            let idleTime = 0;
            const logoutAfterMinutes = 15;

            setInterval(function()  {
                idleTime++;
                if (idleTime >= logoutAfterMinutes) {
                    console.log("Logging out...");
                    sessionStorage.clear();
                    window.location.href = '/Logout';
                }
            }, 60000);

            window.onload = resetIdleTimer;
            window.onmousemove = resetIdleTimer;
            window.onkeypress = resetIdleTimer;
            window.onclick = resetIdleTimer;
            window.onscroll = resetIdleTimer;

            function resetIdleTimer() {
                idleTime = 0;
            }
        </script>        
        <script>
            document.addEventListener("DOMContentLoaded",function(){
                const receiverInput = document.getElementById("receiverInput");
                const messageInput = document.getElementById("messageInput");
                const sendButton = document.getElementById("sendButton");

                function toggleSendButton(){
                    const hasReceiver = receiverInput.value.trim() !== "";
                    const hasMessage = messageInput.value.trim() !== "";

                    sendButton.disabled = !(hasReceiver && hasMessage);
                }
                receiverInput.addEventListener("change",toggleSendButton);
                messageInput.addEventListener("input",toggleSendButton);
                toggleSendButton();
            });
        </script>
        <script>
            const currentUser = "@User.Identity.Name";
            document.getElementById("currentUsername").value = currentUser;
        </script>
        <script>
            window.addEventListener('load', () => {
                    const container = document.querySelector(".messages-list-container");
            if (container) {
                container.scrollTop = container.scrollHeight;
            }
            });
        </script>

</body>
</html>
